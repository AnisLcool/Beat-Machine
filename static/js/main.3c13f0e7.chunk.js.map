{"version":3,"sources":["components/Buttons/Button/Button.js","components/Buttons/Buttons.js","components/Settings/Settings.js","containers/Pad/Pad.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","props","id","onClick","event","playSound","url","desc","label","prevProps","nextProps","Buttons","buttons","samples","map","sampleObj","key","className","Settings","type","onChange","toggleSwitch","checked","power","soundDesc","value","volume","setVolumeHandler","bank","Pad","state","keyPressed","eventType","e","find","el","toUpperCase","document","getElementById","classList","remove","add","click","keyUpHandler","keyDownHandler","setState","sound","Audio","parseFloat","play","prevState","then","data","samples1","samples2","catch","err","console","log","target","addEventListener","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3c13f0e7.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Button.css\";\r\n\r\nfunction Button(props) {\r\n    // console.log(\"btn render\");\r\n    // console.log(\"=\".repeat(20))   \r\n    return (\r\n    <button id={\"btn\" + props.id} onClick={(event) => props.playSound(props.url, props.desc, event)}>{props.label}</button>\r\n    );\r\n}\r\n\r\nexport default React.memo(Button, (prevProps, nextProps) => {\r\n    if(prevProps.url !== nextProps.url){\r\n        return false;\r\n    }else{\r\n        return true;\r\n    }\r\n});\r\n","import React from 'react';\r\nimport Button from './Button/Button';\r\nimport \"./Buttons.css\";\r\n\r\nconst Buttons = (props) => {\r\n    // console.log(\"Buttons render\");\r\n    // console.log(\"=\".repeat(20))\r\n    const buttons = props.samples.map(sampleObj => {\r\n        return <Button {...sampleObj} playSound={props.playSound} key={sampleObj.id}/>\r\n    });\r\n    \r\n    return (\r\n        <div className=\"Buttons-container\">\r\n            {buttons}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;\r\n           ","import React from 'react';\r\nimport \"./Settings.css\";\r\n\r\nfunction Settings(props) {\r\n    // console.log(\"settings render\");\r\n    // console.log(\"=\".repeat(20))\r\n    return (\r\n        <div className=\"Settings\">\r\n            <div className=\"Power\">\r\n                <span>Power</span>\r\n                <label className=\"switch\">\r\n                    <input type=\"checkbox\" onChange={() => props.toggleSwitch(\"power\")} checked={props.power} />\r\n                    <span className=\"slider round\"></span>\r\n                </label>\r\n            </div>\r\n            <div className=\"Sound-desc\">\r\n                <span>{props.soundDesc}</span>\r\n            </div>\r\n            <div className=\"Volume\">\r\n                <input type=\"range\" value={props.volume} onChange={props.setVolumeHandler} />\r\n            </div>\r\n            <div className=\"Bank\">\r\n                <span>Bank</span>\r\n                <label className=\"switch\">\r\n                    <input type=\"checkbox\" onChange={() => props.toggleSwitch(\"bank\")} checked={props.bank} />\r\n                    <span className=\"slider round\"></span>\r\n                </label>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React, { Component } from 'react';\r\nimport Buttons from '../../components/Buttons/Buttons';\r\nimport Settings from '../../components/Settings/Settings';\r\nimport \"./Pad.css\";\r\n// import { samples2 } from '../../sounds/samples';\r\n// import {samples1, samples2} from \"./../../sounds/samples\";\r\n\r\nclass Pad extends Component {\r\n    state = {\r\n        samples: [],\r\n        power: true,\r\n        bank: false,\r\n        soundDesc : \"\",\r\n        volume: \"50\",\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        import(\"./../../sounds/samples\").then(data => {\r\n            document.addEventListener(\"keydown\", (event) => this.keyDownHandler(event, data.samples1), false);\r\n            document.addEventListener(\"keyup\", (event) => this.keyUpHandler(event, data.samples1), false);\r\n            this.setState({\r\n                samples: data.samples1\r\n            })\r\n        }).catch(err => {\r\n            console.log(\"import error: \", err)\r\n        })\r\n    }\r\n\r\n    // shouldComponentUpdate(nextProps , nextState){\r\n    //     console.log(\"should component update\");\r\n    //     console.log(\"next state : \", nextState.power)\r\n    //     if(!nextState.power){\r\n    //         return false;\r\n    //     }\r\n    //     return true;\r\n    // }\r\n    \r\n\r\n    keyPressed = (eventType, e, samples) => {\r\n        const sampleObj = samples.find(el => el.label === e.key.toUpperCase());\r\n        if (sampleObj) {\r\n            const el = document.getElementById(`btn${sampleObj.id}`);\r\n            if(eventType === \"keyUp\"){\r\n                el.classList.remove(\"active\");\r\n            }else{\r\n                el.classList.add(\"active\");\r\n                el.click();\r\n            }\r\n        }\r\n    }\r\n    keyUpHandler = (e, samples) => {\r\n        if(this.state.power){\r\n            this.keyPressed(\"keyUp\", e, samples)\r\n        }\r\n    }\r\n    keyDownHandler = (e, samples) => {\r\n        if(this.state.power){\r\n            this.keyPressed(\"keyDown\", e, samples)\r\n        }\r\n\r\n    }\r\n\r\n    playSound = (url, desc) => {\r\n        // console.log(\"clicked : \", desc)\r\n       if(this.state.power){\r\n        this.setState({soundDesc: desc});\r\n        const sound = new Audio(url);\r\n        sound.volume = parseFloat(this.state.volume) / 100;\r\n        sound.play();\r\n       }\r\n    }\r\n\r\n    toggleSwitch = type => {\r\n        if(type === \"power\"){\r\n            this.setState(prevState => {\r\n                return {\r\n                    power : !prevState.power,\r\n                    soundDesc: \"\"\r\n                }\r\n            })\r\n            \r\n        }else if(type === \"bank\"){\r\n            import(\"./../../sounds/samples\").then(data => {\r\n                \r\n                this.setState(prevState => {\r\n                    return {\r\n                        bank : !prevState.bank,\r\n                        samples: this.state.bank ? data.samples1 : data.samples2\r\n                    }\r\n                })\r\n            }).catch(err => {\r\n                console.log(\"import error: \", err)\r\n            })\r\n            \r\n        }\r\n    }\r\n\r\n    setVolumeHandler = (e) =>{\r\n        this.setState({volume: e.target.value})\r\n    }\r\n    render() {\r\n        // console.log(\"pad render\");\r\n        // console.log(\"=\".repeat(20))\r\n        return (\r\n            <div className=\"Pad\">\r\n                <Buttons samples={this.state.samples} playSound={this.playSound} />\r\n                <Settings toggleSwitch={this.toggleSwitch} power={this.state.power} bank={this.state.bank} soundDesc={this.state.soundDesc} setVolumeHandler={this.setVolumeHandler} volume={this.state.volume}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pad;","import React from 'react';\n\nimport Pad from './containers/Pad/Pad';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pad />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}